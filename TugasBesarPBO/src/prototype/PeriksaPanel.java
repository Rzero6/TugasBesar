/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package prototype;

import com.formdev.flatlaf.FlatClientProperties;
import control.CustomerControl;
import control.StafControl;
import control.TransaksiControl;
import exception.InputKosongException;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import model.Customer;
import model.Staf;
import model.Transaksi;
import utils.UtilTable;

/**
 *
 * @author VICTUS
 */
public class PeriksaPanel extends javax.swing.JPanel implements IPanelKasir{
    private TransaksiControl transaksiControl;
    private CustomerControl customerControl;
    private StafControl stafControl;
    List<Customer> listCustomer;
    List<Staf> listDokter;
    private int selectedID=0;
    /**
     * Creates new form PeriksaPanel
     */
    public PeriksaPanel() {
        initComponents();
        transaksiControl = new TransaksiControl();
        customerControl = new CustomerControl();
        stafControl = new StafControl();
        
        setupProperty(keluhanTxt);
        keluhanTxt.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Keluhan");
        
        setCustomer();
        setDokter();
        setWaitingTable();
        setListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dokterDropdown = new javax.swing.JComboBox<>();
        customerDropdown = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        waitingTable = new javax.swing.JTable();
        addBtn = new javax.swing.JButton();
        delBtn = new javax.swing.JButton();
        keluhanTxt = new javax.swing.JTextField();

        waitingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        waitingTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                waitingTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(waitingTable);

        addBtn.setText("Add");
        addBtn.setEnabled(false);
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        delBtn.setText("Remove");
        delBtn.setEnabled(false);
        delBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(customerDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(dokterDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(keluhanTxt))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(addBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delBtn)))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dokterDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keluhanTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delBtn))
                .addGap(50, 50, 50)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        try{
            InputKosongException();
            Customer selectedCustomer = (Customer) customerDropdown.getSelectedItem();
            String cek = transaksiControl.checkTransaksiForMultipleUndoneTransaction(selectedCustomer.getId());
            if(cek.equalsIgnoreCase("aman")){
                int selectedIndexDokter = dokterDropdown.getSelectedIndex();
                Staf selectedDokter = listDokter.get(selectedIndexDokter);
                Transaksi t = new Transaksi(selectedCustomer, selectedDokter,keluhanTxt.getText());
                transaksiControl.insertDataTransaksi(t);
                setWaitingTable();
                setCustomer();
            }else{
                JOptionPane.showConfirmDialog(this, cek, "Error", JOptionPane.DEFAULT_OPTION);
            }
        }catch(InputKosongException e){
            JOptionPane.showConfirmDialog(this, e.message(),"Warning",JOptionPane.DEFAULT_OPTION);
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void delBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delBtnActionPerformed
        int clickedRow = waitingTable.getSelectedRow();
        TableModel tableModel = waitingTable.getModel();
        int confirm = JOptionPane.showConfirmDialog(null, "Yakin hapus "+tableModel.getValueAt(clickedRow, 1).toString()+"?","Warning",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
        if(confirm==JOptionPane.YES_OPTION){
            transaksiControl.deleteTransaksi(Integer.parseInt(tableModel.getValueAt(clickedRow, 5).toString()));
            setWaitingTable();
            setCustomer();
        }
        
    }//GEN-LAST:event_delBtnActionPerformed

    private void waitingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_waitingTableMouseClicked
     
    }//GEN-LAST:event_waitingTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JComboBox<Customer> customerDropdown;
    private javax.swing.JButton delBtn;
    private javax.swing.JComboBox<Staf> dokterDropdown;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField keluhanTxt;
    private javax.swing.JTable waitingTable;
    // End of variables declaration//GEN-END:variables
    private void setCustomer() {
        listCustomer = customerControl.showListCustomer("");
        setupProperty(customerDropdown);
        customerDropdown.removeAllItems();
        for(Customer c : listCustomer){
            String cek = transaksiControl.checkTransaksiForMultipleUndoneTransaction(c.getId());
            if(cek.equalsIgnoreCase("aman")){
                customerDropdown.addItem(c);
            }
        }
    }

    private void setDokter() {
        listDokter = stafControl.showListStaf("Dokter");
        setupProperty(dokterDropdown);
        dokterDropdown.removeAllItems();
        for(Staf s : listDokter){
            dokterDropdown.addItem(s);
        }
    }
    
    private void setupProperty(JComponent comp){
        comp.putClientProperty(FlatClientProperties.STYLE,""
                +"borderWidth:0;"
                + "focusWidth:0");
    }

    private void setWaitingTable() {
        waitingTable.setModel(transaksiControl.showDataPeriksa(""));
        UtilTable.tableResizeColumnWidth(waitingTable);
    }
    private void InputKosongException() throws InputKosongException{
        if(keluhanTxt.getText().isEmpty()){
            throw new InputKosongException();
        }
    }
    private void setListener(){
        keluhanTxt.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                addBtn.setEnabled(!keluhanTxt.getText().isEmpty() && customerDropdown.getSelectedIndex()!=-1);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                addBtn.setEnabled(!keluhanTxt.getText().isEmpty() && customerDropdown.getSelectedIndex()!=-1);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                addBtn.setEnabled(!keluhanTxt.getText().isEmpty() && customerDropdown.getSelectedIndex()!=-1); 
            }
        });
        ListSelectionModel listSelectionModel = waitingTable.getSelectionModel();
        listSelectionModel.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    // Check if a row or column is selected
                    boolean isRowSelected = waitingTable.getSelectedRow() != -1;
                    boolean isColumnSelected = waitingTable.getSelectedColumn() != -1;

                    // Enable or disable the button based on the selection
                    delBtn.setEnabled(isRowSelected || isColumnSelected);
                }
            }
        });
        
        
    }

    @Override
    public void refreshDataTable() {
        setWaitingTable();
        setCustomer();
        setDokter();
    }
}
