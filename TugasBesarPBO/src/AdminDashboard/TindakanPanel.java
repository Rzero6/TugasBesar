/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package AdminDashboard;

import com.formdev.flatlaf.FlatClientProperties;
import control.TindakanControl;
import exception.InputKosongException;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import model.Tindakan;

/**
 *
 * @author VICTUS
 */
public class TindakanPanel extends javax.swing.JPanel implements IPanelAdmin {

    
    private TindakanControl tindakanControl;
    private List<Tindakan> listTindakan;
    private int selectedId=0;
    public TindakanPanel() {
        initComponents();
        tindakanControl = new TindakanControl();
//        namaTindakanInput1.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Nama tindakan");
//        hargaTindakanInput1.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Harga Tindakan");
        searchInput.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Cari");
//        setBorderandFocus(namaTindakanInput1);
//        setBorderandFocus(hargaTindakanInput1);
        setBorderandFocus(searchInput);
        
        try{
            inputKosongException();
        }catch(InputKosongException e){
            System.out.println(e.message());
        }finally{
            setTableTindakan("");
            setListener();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tindakanTable = new KasirDashboard.TableCustom();
        addBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        searchInput = new javax.swing.JTextField();
        clearBtn = new javax.swing.JButton();
        hargaTindakanInput = new KasirDashboard.CustomePalette.TextField();
        namaTindakanInput = new KasirDashboard.CustomePalette.TextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tindakanTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tindakanTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tindakanTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tindakanTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 60, 520, 270));

        addBtn.setText("Tambah");
        addBtn.setEnabled(false);
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });
        add(addBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, 30));

        editBtn.setText("Ubah");
        editBtn.setEnabled(false);
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });
        add(editBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(99, 20, -1, 30));

        deleteBtn.setText("Hapus");
        deleteBtn.setEnabled(false);
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });
        add(deleteBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(177, 20, -1, 30));

        searchInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchInputActionPerformed(evt);
            }
        });
        add(searchInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 30, 350, -1));

        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });
        add(clearBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 240, 70, -1));

        hargaTindakanInput.setLabelText("Harga Tindakan");
        add(hargaTindakanInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 250, -1));

        namaTindakanInput.setLabelText("Nama Tindakan");
        add(namaTindakanInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 250, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        try{
            Tindakan tindakan = new Tindakan(namaTindakanInput.getText(), Double.parseDouble(hargaTindakanInput.getText()));
            if(checkTindakanSama(tindakan)){
                JOptionPane.showConfirmDialog(this, "Tindakan sudah terdaftar","Error",JOptionPane.PLAIN_MESSAGE,JOptionPane.ERROR_MESSAGE);
                clearAll();
                searchInput.setText(tindakan.getNama());
            }else{
                tindakanControl.insertTindakan(tindakan);
                clearAll();
                setTableTindakan("");
            }
            
        }catch(NumberFormatException e){
            System.out.println(e.getMessage());
        }
        
        
    }//GEN-LAST:event_addBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        try{
            Tindakan tindakan = new Tindakan(selectedId,namaTindakanInput.getText(), Double.parseDouble(hargaTindakanInput.getText()));
            tindakanControl.updateTindakan(tindakan);
            clearAll();
            setTableTindakan("");
        }catch(NumberFormatException e){
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        int getAnswer = JOptionPane.showConfirmDialog(this, "Apakah yakin ingin menghapus data? ", "Konfirmasi", JOptionPane.YES_NO_OPTION);
        switch (getAnswer) {
            case 0:
            try {
                tindakanControl.deleteTindakan(selectedId);
                clearAll();
                setTableTindakan("");
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
            break;
            case 1:
            break;
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void searchInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchInputActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        clearAll();
    }//GEN-LAST:event_clearBtnActionPerformed

    private void tindakanTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tindakanTableMouseClicked
        // TODO add your handling code here:
        
        int clickRow = tindakanTable.getSelectedRow();
        TableModel tableModel = tindakanTable.getModel();

        selectedId= Integer.parseInt(tableModel.getValueAt(clickRow, 0).toString());
        namaTindakanInput.setText(tableModel.getValueAt(clickRow, 1).toString());
        hargaTindakanInput.setText(tableModel.getValueAt(clickRow, 2).toString());
    }//GEN-LAST:event_tindakanTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private KasirDashboard.CustomePalette.TextField hargaTindakanInput;
    private javax.swing.JScrollPane jScrollPane2;
    private KasirDashboard.CustomePalette.TextField namaTindakanInput;
    private javax.swing.JTextField searchInput;
    private KasirDashboard.TableCustom tindakanTable;
    // End of variables declaration//GEN-END:variables

    private void clearAll() {
        namaTindakanInput.setText("");
        hargaTindakanInput.setText("");
        searchInput.setText("");
        tindakanTable.clearSelection();
        deleteBtn.setEnabled(false);
    }

    private void setTableTindakan(String query) {
        tindakanTable.setModel(tindakanControl.showDataTindakan(query));
        listTindakan = tindakanControl.showListTindakan("");
    }

    private void setListener() {
        DocumentListener docListener = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                try{
                    inputKosongException();
                    Double.parseDouble(hargaTindakanInput.getText());
                    addBtn.setEnabled(tindakanTable.getSelectedRow()==-1);
                }catch(NumberFormatException nfe){
                    addBtn.setEnabled(false);
                }catch(InputKosongException ex){
                    addBtn.setEnabled(false);
                }catch(Exception ex1){
                    addBtn.setEnabled(false);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                try{
                    inputKosongException();
                    Double.parseDouble(hargaTindakanInput.getText());
                    addBtn.setEnabled(tindakanTable.getSelectedRow()==-1);
                }catch(NumberFormatException nfe){
                    addBtn.setEnabled(false);
                }catch(InputKosongException ex){
                    addBtn.setEnabled(false);
                }catch(Exception ex1){
                    addBtn.setEnabled(false);
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                try{
                    inputKosongException();
                    Double.parseDouble(hargaTindakanInput.getText());
                    addBtn.setEnabled(tindakanTable.getSelectedRow()==-1);
                    editBtn.setEnabled(tindakanTable.getSelectedRow()!=-1);
                }catch(NumberFormatException nfe){
                    addBtn.setEnabled(false);
                }catch(InputKosongException ex){
                    addBtn.setEnabled(false);
                }catch(Exception ex1){
                    addBtn.setEnabled(false);
                }
            }
        };
        namaTindakanInput.getDocument().addDocumentListener(docListener);
        hargaTindakanInput.getDocument().addDocumentListener(docListener);
        
        searchInput.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                setTableTindakan(searchInput.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                setTableTindakan(searchInput.getText());
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                setTableTindakan(searchInput.getText());
            }
        });
        
        tindakanTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if(!e.getValueIsAdjusting()){
                    editBtn.setEnabled(tindakanTable.getSelectedRow()!=-1);
                    deleteBtn.setEnabled(tindakanTable.getSelectedRow()!=-1);
                }
            }
        });
    }
    
    public void inputKosongException()throws InputKosongException{
        if(namaTindakanInput.getText().isEmpty() || hargaTindakanInput.getText().isEmpty()){
            throw new InputKosongException();
        }
    }

    @Override
    public void refreshData() {
        setTableTindakan("");
        clearAll();
    }
    private Boolean checkTindakanSama(Tindakan tindakan){
        for (Tindakan t : listTindakan){
            if(t.getNama().equalsIgnoreCase(tindakan.getNama())){
                return true;
            }
        }
        return false;
    }
    private void setBorderandFocus(JComponent comp){
        comp.putClientProperty(FlatClientProperties.STYLE, ""
                +"borderWidth:1;"
                + "focusWidth:0");
    }
}
